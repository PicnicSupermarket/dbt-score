[build-system]
requires = ["hatchling>=1.27.0, <2.0.0", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[project]
name = "dbt-score"
dynamic = ["version"]

description = "Linter for dbt metadata."
authors = [
    {name = "Picnic Analyst Development Platform", email = "analyst-development-platform@teampicnic.com"}
]

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
]

dependencies = [
    "click>=7.1.1, <9.0.0",
    "tomli>=1.1.0; python_version<'3.11'",
]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}

[project.scripts]
dbt-score = "dbt_score.__main__:main"

[dependency-groups]
dev = [
    "dbt-core>=1.5",
    "tox-uv~=1.28",
    "tox~=4.13",
]
lint = [
    "ruff~=0.2.2",
    "mypy~=1.8",
]
test = [
    "pytest~=8.0",
    "coverage[toml]~=7.4"
]
docs = [
    "mkdocs-material~=9.5",
    "mkdocstrings[python]~=0.26.0"
]

### Mypy ###

[tool.mypy]
strict = true
warn_no_return = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false

### Ruff ###

[tool.ruff]
line-length = 88

[tool.ruff.lint]
extend-select = [
    "B", # flake8-bugbear
    "C90", # mccabe
    "I", # isort
    "PL", # pylint
    "Q", # flake8-quotes
    "RUF", # ruff
    "D", # pycodestyle
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 11

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 9

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "PLR2004",  # Magic value comparisons
    "PLR0913",  # Too many args in func def
]

### Coverage ###

[tool.coverage.run]
source = [
    "tests",
    "src"
]

[tool.coverage.report]
show_missing = true
fail_under = 80
exclude_also = [
    "@overload"
]
